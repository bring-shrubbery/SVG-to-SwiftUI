const{extname}=require("path"),{readFileSync}=require("fs"),tsm=require("./utils"),loadJS=require.extensions[".js"];let esbuild,env=tsm.$defaults("cjs"),uconf=env.file&&require(env.file),config=tsm.$finalize(env,uconf);const tsrequire='var $$req=require("module").createRequire(__filename);require=('+function(){let{existsSync:r}=$$req("fs"),t=$$req("url");return new Proxy(require,{apply(s,n,o){let[e]=o;if(!e)return s.apply(n||$$req,o);if(/^\w+\:?/.test(e))return $$req(e);let l=/\.([mc])?js(?=\?|$)/.exec(e);if(l==null)return $$req(e);let u=t.pathToFileURL(__filename),i=t.fileURLToPath(new t.URL(e,u));return r(i)?$$req(e):(i=i.replace(new RegExp(l[0]+"$"),l[0].replace("js","ts")),r(i)?$$req(i):$$req(e))}})}+")();";function transform(r,t){return esbuild=esbuild||require("esbuild"),esbuild.transformSync(r,t).code}function loader(r,t){let s=extname(t),n=config[s]||{},o=r._compile.bind(r);n.sourcefile=t,/\.[mc]?tsx?$/.test(s)&&(n.banner=tsrequire+(n.banner||"")),config[s]!=null&&(r._compile=e=>{let l=transform(e,n);return o(l,t)});try{return loadJS(r,t)}catch(e){if((e&&e.code)!=="ERR_REQUIRE_ESM")throw e;let u=readFileSync(t,"utf8"),i=transform(u,{...n,format:"cjs"});return o(i,t)}}for(let r in config)require.extensions[r]=loader;config[".js"]==null&&(require.extensions[".js"]=loader);
